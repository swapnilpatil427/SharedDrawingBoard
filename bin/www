#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('HeyChat:server');
var http = require('http');
var draw = require("../src/draw");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var paths = [];
io.on('connection', function(socket) {
    socket.on('disconnect', function() {});
    socket.on('chat', function(msg, room) {
        io.sockets.in(room.trim()).emit('chat', msg);
    });

    socket.on('draw:progress', function(room, uid, co_ordinates) {
        io.sockets.in(room.trim()).emit('draw:progress', uid, co_ordinates);
        draw.savePath(room,co_ordinates);
        //paths.push(co_ordinates.path);
        //io.sockets.in.emit('draw:progress', uid, co_ordinates);
        //draw.progressExternalPath(room, JSON.parse(co_ordinates), uid);
    });

    // EVENT: User stops drawing something
    // Having room as a parameter is not good for secure rooms
    socket.on('draw:end', function(room, uid, co_ordinates) {
        io.sockets.in(room.trim()).emit('draw:end', uid, co_ordinates);
        //console.log(paths);
        //draw.endExternalPath(room, JSON.parse(co_ordinates), uid);
    });

    socket.on('subscribe', function(room) {
        socket.join(room.trim());
        draw.subscribe(room);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
